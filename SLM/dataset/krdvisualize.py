# -*- coding: utf-8 -*-
"""KRDvisualize.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KFNNyHgDVSBu_doDSFcmCJi9W2LzkZFX
"""

import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.font_manager as fm

path = '/content/drive/MyDrive/dataset/NanumBarunGothic.ttf'  # 예시 경로
fontprop = fm.FontProperties(fname=path, size=18)

plt.rc('font', family='NanumBarunGothic')  # 폰트 이름으로 직접 설정

from google.colab import drive
drive.mount('/content/drive')

# Specify the path to your CSV file
file_path = '/content/drive/MyDrive/dataset/CertificateDatasets/cert1.csv'

# Try reading the CSV file using 'EUC-KR' encoding
try:
    df = pd.read_csv(file_path, encoding='euc-kr')
except UnicodeDecodeError:
    # If a UnicodeDecodeError occurs, try 'utf-8' encoding
    df = pd.read_csv(file_path, encoding='utf-8')

# Display the first few rows of the dataframe
print(df.head())

plt.figure(figsize=(10,5))
plt.bar(df['취득년도'], df['취득 수'], label='Line 1')
plt.title('Bar Chart Example', fontproperties=fontprop)
plt.xlabel('X-axis Label', fontproperties=fontprop)
plt.ylabel('Y-axis Label', fontproperties=fontprop)
plt.legend()
plt.xlabel('취득년도', fontproperties=fontprop)
plt.ylabel('취득_수', fontproperties=fontprop)

plt.show()

plt.figure(figsize=(10,5))
plt.bar(df['연령'], df['취득 수'], color='skyblue')
plt.title('Bar Chart Example', fontproperties=fontprop)
plt.xlabel('Category', fontproperties=fontprop)
plt.ylabel('Values', fontproperties=fontprop)
plt.xlabel('연령대', fontproperties=fontprop)
plt.ylabel('취득_수', fontproperties=fontprop)

plt.show()

plt.figure(figsize=(10,5))
plt.hist(df['취득월'], bins=10, color='purple', alpha=0.7)
plt.title('Histogram Example', fontproperties=fontprop)
plt.xlabel('Bins', fontproperties=fontprop)
plt.ylabel('Frequency', fontproperties=fontprop)
plt.xlabel('월', fontproperties=fontprop)
plt.ylabel('취득_수', fontproperties=fontprop)

plt.show()

"""
plt.figure(figsize=(10,5))
# Convert categorical data to numeric values
df['numeric_지역명'] = df['지역명'].astype('category').cat.codes
df['numeric_계열명'] = df['계열명'].astype('category').cat.codes

# Update column names for the scatter plot
column_x = 'numeric_지역명'  # Numeric representation of '지역명'
column_y = 'numeric_계열명'  # Numeric representation of '계열명'

# Assuming 'df' is your DataFrame and 'column_x' and 'column_y' are your column names

# Create an array for sizes that matches the number of data points
# For example, if you want the size to be proportional to another column in your DataFrame:
sizes = df['some_column'].values  # Replace 'some_column' with the column name

# Now, use the 'sizes' array in your scatter plot
plt.figure(figsize=(10,5))
plt.scatter(df[column_x], df[column_y], s=sizes, color='green')  # 'sizes' matches the number of points
plt.title('Scatter Plot Example', fontproperties=fontprop)
plt.xlabel('지역명 (Numeric)', fontproperties=fontprop)
plt.ylabel('계열명 (Numeric)', fontproperties=fontprop)
plt.show()

"""

plt.figure(figsize=(10,5))
# Remove rows with at least one NaN value
df_cleaned = df.dropna()

# Remove rows where all values are NaN
df_cleaned_all = df.dropna(how='all')

# Remove rows with NaN in a specific column(s)
df_cleaned_subset = df.dropna(subset=['연령'])

# Remove columns with at least one NaN value
df_cleaned_columns = df.dropna(axis=1)

# Remove rows with less than 'n' non-NaN values
df_cleaned_thresh = df.dropna(thresh=n)

# Perform the operation in-place without returning a new DataFrame
df.dropna(inplace=True)


plt.pie(df['연령'], labels=df['취득월'], autopct='%1.1f%%', startangle=140)
plt.title('Pie Chart Example', fontproperties=fontprop)
plt.show()

